2025-06-26 16:07:32 - CryptoBotV6 - INFO - logger.setup_logging:103 - Logger initialized with level INFO. Logging to console and '/home/gman/workspace/Crypto-Bots/Active/Single-File/v6/bot_data/logs/v6_trading_bot.log'.
============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-7.4.0, pluggy-1.6.0 -- /home/gman/workspace/Crypto-Bots/Active/Single-File/v6/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /home/gman/workspace/Crypto-Bots/Active/Single-File/v6
plugins: mock-3.10.0, cov-4.1.0
collecting ... collected 131 items

tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_empty_order_ids PASSED [  0%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_error_handling PASSED [  1%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_failure_unknown_reason PASSED [  2%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_failure_with_error_response PASSED [  3%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_failure_with_failure_reason PASSED [  3%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_malformed_response_no_results_key PASSED [  4%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_malformed_response_not_dict PASSED [  5%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_malformed_response_results_item_not_dict PASSED [  6%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_malformed_response_results_not_list PASSED [  6%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_no_client PASSED [  7%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_cancel_orders_success PASSED [  8%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_generate_client_order_id PASSED [  9%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_generate_client_order_id_single_char_id PASSED [  9%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_accounts_error_handling PASSED [ 10%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_accounts_invalid_json_response PASSED [ 11%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_accounts_malformed_response_accounts_not_list PASSED [ 12%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_accounts_malformed_response_no_accounts_key PASSED [ 12%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_accounts_malformed_response_not_dict PASSED [ 13%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_accounts_no_client PASSED [ 14%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_accounts_success PASSED [ 15%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_order_malformed_response_no_order_key PASSED [ 16%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_order_malformed_response_order_not_dict PASSED [ 16%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_candles_empty_product_id PASSED [ 17%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_candles_error_handling PASSED [ 18%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_candles_malformed_response_candles_not_list PASSED [ 19%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_candles_no_client PASSED [ 19%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_candles_success PASSED [ 20%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_error_handling FAILED [ 21%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_error_handling_retry FAILED [ 22%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_no_client PASSED [ 22%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_success PASSED [ 23%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_handle_api_response_with_to_dict_object PASSED [ 24%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_initialization_empty_api_key PASSED [ 25%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_initialization_empty_api_secret PASSED [ 25%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_initialization_failure PASSED [ 26%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_initialization_no_api_key PASSED [ 27%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_initialization_no_api_secret PASSED [ 28%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_initialization_success PASSED [ 29%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_initialization_with_arguments PASSED [ 29%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_empty_product_id PASSED [ 30%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_failure PASSED [ 31%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_failure_unknown_error PASSED [ 32%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_failure_with_error_response PASSED [ 32%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_invalid_side PASSED [ 33%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_malformed_response_not_dict PASSED [ 34%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_no_client PASSED [ 35%]
tests/test_coinbase_client.py::TestCoinbaseClient::test_limit_order_success PASSED [ 35%]
tests/test_config.py::TestConfig::test_api_key_empty PASSED              [ 36%]
tests/test_config.py::TestConfig::test_api_key_missing PASSED            [ 37%]
tests/test_config.py::TestConfig::test_api_keys_loaded_successfully PASSED [ 38%]
tests/test_config.py::TestConfig::test_api_secret_empty PASSED           [ 38%]
tests/test_config.py::TestConfig::test_api_secret_missing PASSED         [ 39%]
tests/test_config.py::TestConfig::test_candle_granularity_seconds PASSED [ 40%]
tests/test_config.py::TestConfig::test_config_module_main_block_runs PASSED [ 41%]
tests/test_config.py::TestConfig::test_default_general_settings PASSED   [ 41%]
tests/test_config.py::TestConfig::test_trading_pairs_structure_and_defaults PASSED [ 42%]
tests/test_connection.py::test_api_connection PASSED                     [ 43%]
tests/test_logger.py::TestLogger::test_file_handler_creation_io_error PASSED [ 44%]
tests/test_logger.py::TestLogger::test_log_directory_creation_failure PASSED [ 45%]
tests/test_logger.py::TestLogger::test_logging_to_file PASSED            [ 45%]
tests/test_logger.py::TestLogger::test_successful_initialization PASSED  [ 46%]
tests/test_main.py::TestMainModule::test_run_bot_asset_processing_error_continues FAILED [ 47%]
tests/test_main.py::TestMainModule::test_run_bot_client_initialization_failure FAILED [ 48%]
tests/test_main.py::TestMainModule::test_run_bot_success FAILED          [ 48%]
tests/test_order_calculator.py::TestOrderCalculator::test_determine_sell_orders_happy_path PASSED [ 49%]
tests/test_order_calculator.py::TestOrderCalculator::test_input_validation_assertions PASSED [ 50%]
tests/test_order_calculator.py::TestOrderCalculator::test_last_tier_sells_remaining_quantity PASSED [ 51%]
tests/test_order_calculator.py::TestOrderCalculator::test_returns_empty_if_all_tiers_below_min_size PASSED [ 51%]
tests/test_order_calculator.py::TestOrderCalculator::test_round_decimal_down PASSED [ 52%]
tests/test_order_calculator.py::TestOrderCalculator::test_round_decimal_no_change PASSED [ 53%]
tests/test_order_calculator.py::TestOrderCalculator::test_round_decimal_with_assertion_error PASSED [ 54%]
tests/test_order_calculator.py::TestOrderCalculator::test_skips_tier_if_quantity_below_min_size PASSED [ 54%]
tests/test_persistence.py::TestPersistence::test_add_sell_order_creates_list_if_not_exists PASSED [ 55%]
tests/test_persistence.py::TestPersistence::test_add_sell_order_duplicate_not_added PASSED [ 56%]
tests/test_persistence.py::TestPersistence::test_add_sell_order_no_filled_trade PASSED [ 57%]
tests/test_persistence.py::TestPersistence::test_add_sell_order_to_filled_trade_success PASSED [ 58%]
tests/test_persistence.py::TestPersistence::test_clear_filled_buy_trade_exists PASSED [ 58%]
tests/test_persistence.py::TestPersistence::test_clear_filled_buy_trade_not_exists PASSED [ 59%]
tests/test_persistence.py::TestPersistence::test_clear_open_buy_order_exists PASSED [ 60%]
tests/test_persistence.py::TestPersistence::test_clear_open_buy_order_not_exists PASSED [ 61%]
tests/test_persistence.py::TestPersistence::test_load_filled_buy_trade_corrupted_data PASSED [ 61%]
tests/test_persistence.py::TestPersistence::test_load_filled_buy_trade_not_found PASSED [ 62%]
tests/test_persistence.py::TestPersistence::test_load_filled_buy_trade_success PASSED [ 63%]
tests/test_persistence.py::TestPersistence::test_load_open_buy_order_corrupted_data PASSED [ 64%]
tests/test_persistence.py::TestPersistence::test_load_open_buy_order_not_found PASSED [ 64%]
tests/test_persistence.py::TestPersistence::test_load_open_buy_order_success PASSED [ 65%]
tests/test_persistence.py::TestPersistence::test_load_trade_state_corrupted_data_not_dict PASSED [ 66%]
tests/test_persistence.py::TestPersistence::test_load_trade_state_file_not_found PASSED [ 67%]
tests/test_persistence.py::TestPersistence::test_load_trade_state_json_decode_error PASSED [ 67%]
tests/test_persistence.py::TestPersistence::test_load_trade_state_success PASSED [ 68%]
tests/test_persistence.py::TestPersistence::test_save_filled_buy_trade PASSED [ 69%]
tests/test_persistence.py::TestPersistence::test_save_open_buy_order PASSED [ 70%]
tests/test_persistence.py::TestPersistence::test_save_trade_state_creates_dir PASSED [ 70%]
tests/test_persistence.py::TestPersistence::test_save_trade_state_success PASSED [ 71%]
tests/test_persistence.py::TestPersistence::test_update_sell_order_status_no_filled_trade PASSED [ 72%]
tests/test_persistence.py::TestPersistence::test_update_sell_order_status_no_sell_orders_list PASSED [ 73%]
tests/test_persistence.py::TestPersistence::test_update_sell_order_status_order_not_found PASSED [ 74%]
tests/test_persistence.py::TestPersistence::test_update_sell_order_status_success PASSED [ 74%]
tests/test_signal_analyzer.py::TestSignalAnalyzer::test_handles_non_numeric_rsi_values PASSED [ 75%]
tests/test_signal_analyzer.py::TestSignalAnalyzer::test_input_validation_raises_assertion_error PASSED [ 76%]
tests/test_signal_analyzer.py::TestSignalAnalyzer::test_should_buy_asset_false_on_rsi_equals_threshold PASSED [ 77%]
tests/test_signal_analyzer.py::TestSignalAnalyzer::test_should_buy_asset_false_when_rsi_above_threshold PASSED [ 77%]
tests/test_signal_analyzer.py::TestSignalAnalyzer::test_should_buy_asset_false_when_rsi_below_threshold PASSED [ 78%]
tests/test_signal_analyzer.py::TestSignalAnalyzer::test_should_buy_asset_false_when_rsi_crosses_down PASSED [ 79%]
tests/test_signal_analyzer.py::TestSignalAnalyzer::test_should_buy_asset_true_when_rsi_crosses_up PASSED [ 80%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_all_nan_close PASSED [ 80%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_contains_some_nan_close PASSED [ 81%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_empty_dataframe PASSED [ 82%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_exact_data_points_for_period PASSED [ 83%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_generic_exception PASSED [ 83%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_insufficient_data PASSED [ 84%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_missing_close_column PASSED [ 85%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_non_numeric_close_column PASSED [ 86%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_rsi_valid_data PASSED [ 87%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_all_nan_close PASSED [ 87%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_contains_some_nan_close PASSED [ 88%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_empty_dataframe PASSED [ 89%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_exact_data_points_for_period PASSED [ 90%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_generic_exception PASSED [ 90%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_insufficient_data PASSED [ 91%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_missing_close_column PASSED [ 92%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_non_numeric_close_column PASSED [ 93%]
tests/test_technical_analysis.py::TestTechnicalAnalysis::test_calculate_sma_valid_data PASSED [ 93%]
tests/test_trade_manager.py::TestTradeManager::test_handle_filled_buy_order_checks_existing_sell_orders PASSED [ 94%]
tests/test_trade_manager.py::TestTradeManager::test_handle_filled_buy_order_places_new_sell_orders FAILED [ 95%]
tests/test_trade_manager.py::TestTradeManager::test_handle_new_buy_order_does_not_place_order_on_no_signal PASSED [ 96%]
tests/test_trade_manager.py::TestTradeManager::test_handle_new_buy_order_places_order_on_signal PASSED [ 96%]
tests/test_trade_manager.py::TestTradeManager::test_handle_open_buy_order_is_filled PASSED [ 97%]
tests/test_trade_manager.py::TestTradeManager::test_handle_open_buy_order_is_still_open PASSED [ 98%]
tests/test_trade_manager.py::TestTradeManager::test_process_cycle_handles_no_config FAILED [ 99%]
tests/test_trade_manager.py::TestTradeManager::test_process_cycle_handles_no_product_details PASSED [100%]

=================================== FAILURES ===================================
______________ TestCoinbaseClient.test_get_product_error_handling ______________

self = <MagicMock name='logger.get_logger().error' id='139778332972416'>
args = ('Assertion failed in get_product for BTC-USD: Test HTTP Error',)
kwargs = {'exc_info': True}
expected = call('Assertion failed in get_product for BTC-USD: Test HTTP Error', exc_info=True)
actual = call('Failed to fetch product details for BTC-USD after 3 attempts.', exc_info=True)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f20adfc3560>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: error('Assertion failed in get_product for BTC-USD: Test HTTP Error', exc_info=True)
E             Actual: error('Failed to fetch product details for BTC-USD after 3 attempts.', exc_info=True)

/usr/lib/python3.12/unittest/mock.py:944: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_coinbase_client.TestCoinbaseClient testMethod=test_get_product_error_handling>

    def test_get_product_error_handling(self):
        """Test all error handling for get_product."""
        self.mock_logger_instance.reset_mock()
        api_args = {"product_id": "BTC-USD"}
        log_message = f"Assertion failed in get_product for BTC-USD: {self.mock_http_error}"
>       self._test_api_call_http_error(
            "get_product", "get_product", api_args, log_message
        )

tests/test_coinbase_client.py:372: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.test_coinbase_client.TestCoinbaseClient testMethod=test_get_product_error_handling>
method_name = 'get_product', rest_method_name = 'get_product'
api_args = {'product_id': 'BTC-USD'}
log_message = 'Assertion failed in get_product for BTC-USD: Test HTTP Error'

    def _test_api_call_http_error(
        self, method_name, rest_method_name, api_args, log_message
    ):
        """Helper to test HTTPError handling for a given client method."""
        getattr(self.mock_rest_client_instance, rest_method_name).side_effect = (
            self.mock_http_error
        )
        result = getattr(self.client, method_name)(**api_args)
        self.assertIsNone(result)
>       self.mock_logger_instance.error.assert_called_with(log_message, exc_info=True)
E       AssertionError: expected call not found.
E       Expected: error('Assertion failed in get_product for BTC-USD: Test HTTP Error', exc_info=True)
E         Actual: error('Failed to fetch product details for BTC-USD after 3 attempts.', exc_info=True)
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ('Failed to fetch product details for BTC-USD after 3 attempts.',) == ('Assertion failed in get_product for BTC-USD: Test HTTP Error',)
E         At index 0 diff: 'Failed to fetch product details for BTC-USD after 3 attempts.' != 'Assertion failed in get_product for BTC-USD: Test HTTP Error'
E         Full diff:
E         - ('Assertion failed in get_product for BTC-USD: Test HTTP Error',)
E         + ('Failed to fetch product details for BTC-USD after 3 attempts.',)

tests/test_coinbase_client.py:64: AssertionError
___________ TestCoinbaseClient.test_get_product_error_handling_retry ___________

self = <tests.test_coinbase_client.TestCoinbaseClient testMethod=test_get_product_error_handling_retry>
mock_sleep = <MagicMock name='sleep' id='139778333325216'>

    @patch("trading.coinbase_client.time.sleep", return_value=None)
    def test_get_product_error_handling_retry(self, mock_sleep):
        """Test error handling and retry logic in get_product."""
>       self.mock_rest_client.get_product.side_effect = HTTPError("API Error")
E       AttributeError: 'TestCoinbaseClient' object has no attribute 'mock_rest_client'. Did you mean: 'mock_rest_client_class'?

tests/test_coinbase_client.py:385: AttributeError
_________ TestMainModule.test_run_bot_asset_processing_error_continues _________
/usr/lib/python3.12/unittest/mock.py:1387: in patched
    with self.decoration_helper(patched,
/usr/lib/python3.12/contextlib.py:137: in __enter__
    return next(self.gen)
/usr/lib/python3.12/unittest/mock.py:1369: in decoration_helper
    arg = exit_stack.enter_context(patching)
/usr/lib/python3.12/contextlib.py:526: in enter_context
    result = _enter(cm)
/usr/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f20d8e5d2e0>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'trading.main' from '/home/gman/workspace/Crypto-Bots/Active/Single-File/v6/trading/main.py'> does not have the attribute 'TradeManager'

/usr/lib/python3.12/unittest/mock.py:1431: AttributeError
__________ TestMainModule.test_run_bot_client_initialization_failure ___________
/usr/lib/python3.12/unittest/mock.py:1387: in patched
    with self.decoration_helper(patched,
/usr/lib/python3.12/contextlib.py:137: in __enter__
    return next(self.gen)
/usr/lib/python3.12/unittest/mock.py:1369: in decoration_helper
    arg = exit_stack.enter_context(patching)
/usr/lib/python3.12/contextlib.py:526: in enter_context
    result = _enter(cm)
/usr/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f20d8e5d040>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'trading.main' from '/home/gman/workspace/Crypto-Bots/Active/Single-File/v6/trading/main.py'> does not have the attribute 'CoinbaseClient'

/usr/lib/python3.12/unittest/mock.py:1431: AttributeError
_____________________ TestMainModule.test_run_bot_success ______________________
/usr/lib/python3.12/unittest/mock.py:1387: in patched
    with self.decoration_helper(patched,
/usr/lib/python3.12/contextlib.py:137: in __enter__
    return next(self.gen)
/usr/lib/python3.12/unittest/mock.py:1369: in decoration_helper
    arg = exit_stack.enter_context(patching)
/usr/lib/python3.12/contextlib.py:526: in enter_context
    result = _enter(cm)
/usr/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <unittest.mock._patch object at 0x7f20d8e5cb30>

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <module 'trading.main' from '/home/gman/workspace/Crypto-Bots/Active/Single-File/v6/trading/main.py'> does not have the attribute 'TradeManager'

/usr/lib/python3.12/unittest/mock.py:1431: AttributeError
_____ TestTradeManager.test_handle_filled_buy_order_places_new_sell_orders _____

self = <MagicMock name='mock.add_sell_order_to_filled_trade' id='139778333020512'>
args = ()
kwargs = {'asset_id': 'BTC-USD', 'sell_order_details': {'order_id': 'sell-456', 'price': '102.00', 'size': '1.0', 'status': 'OPEN'}, 'sell_order_id': 'sell-456'}
msg = "Expected 'add_sell_order_to_filled_trade' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'add_sell_order_to_filled_trade' to be called once. Called 0 times.

/usr/lib/python3.12/unittest/mock.py:955: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_trade_manager.TestTradeManager testMethod=test_handle_filled_buy_order_places_new_sell_orders>

    def test_handle_filled_buy_order_places_new_sell_orders(self):
        """Test placing sell orders after a buy order is filled."""
        # Arrange: A filled buy trade exists with no associated sell orders
        filled_buy = {
            "buy_order_id": "buy-123",
            "buy_price": "100.00",
            "buy_quantity": "1.0",
            "associated_sell_orders": [],
        }
        self.mock_persistence.load_trade_state.return_value = {
            "filled_buy_trade": filled_buy
        }
        self.mock_config.TRADING_PAIRS["BTC-USD"]["sell_profit_tiers"] = [
            {"profit_target": 0.02, "quantity_percentage": 1.0}
        ]
        self.mock_client.limit_order_sell.return_value = {
            "success": True,
            "order_id": "sell-456",
        }
        self.mock_order_calculator.determine_sell_orders_params.return_value = [
            {"limit_price": "102.00", "base_size": "1.0"}
        ]
    
        # Act
        self.trade_manager.process_asset_trade_cycle("BTC-USD")
    
        # Assert
        self.mock_client.limit_order_sell.assert_called_once_with(
            product_id="BTC-USD",
            base_size="1.0",
            limit_price="102.00",
            client_order_id=unittest.mock.ANY,
        )
>       self.mock_persistence.add_sell_order_to_filled_trade.assert_called_once_with(
            asset_id="BTC-USD",
            sell_order_id="sell-456",
            sell_order_details={
                "order_id": "sell-456",
                "price": "102.00",
                "size": "1.0",
                "status": "OPEN",
            },
        )
E       AssertionError: Expected 'add_sell_order_to_filled_trade' to be called once. Called 0 times.

tests/test_trade_manager.py:212: AssertionError
____________ TestTradeManager.test_process_cycle_handles_no_config _____________

self = <MagicMock name='mock.error' id='139778331696048'>
args = ('[BTC-USD] Configuration not found.',), kwargs = {}
expected = "error('[BTC-USD] Configuration not found.')", actual = 'not called.'
error_message = "expected call not found.\nExpected: error('[BTC-USD] Configuration not found.')\n  Actual: not called."

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
>           raise AssertionError(error_message)
E           AssertionError: expected call not found.
E           Expected: error('[BTC-USD] Configuration not found.')
E             Actual: not called.

/usr/lib/python3.12/unittest/mock.py:935: AssertionError

During handling of the above exception, another exception occurred:

self = <tests.test_trade_manager.TestTradeManager testMethod=test_process_cycle_handles_no_config>

    def test_process_cycle_handles_no_config(self):
        """Test that the trade cycle exits gracefully if asset config is missing."""
        self.trade_manager.process_asset_trade_cycle("BTC-USD")
>       self.mock_logger.error.assert_called_with("[BTC-USD] Configuration not found.")
E       AssertionError: expected call not found.
E       Expected: error('[BTC-USD] Configuration not found.')
E         Actual: not called.

tests/test_trade_manager.py:60: AssertionError
=========================== short test summary info ============================
FAILED tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_error_handling
FAILED tests/test_coinbase_client.py::TestCoinbaseClient::test_get_product_error_handling_retry
FAILED tests/test_main.py::TestMainModule::test_run_bot_asset_processing_error_continues
FAILED tests/test_main.py::TestMainModule::test_run_bot_client_initialization_failure
FAILED tests/test_main.py::TestMainModule::test_run_bot_success - AttributeEr...
FAILED tests/test_trade_manager.py::TestTradeManager::test_handle_filled_buy_order_places_new_sell_orders
FAILED tests/test_trade_manager.py::TestTradeManager::test_process_cycle_handles_no_config
======================== 7 failed, 124 passed in 10.79s ========================
