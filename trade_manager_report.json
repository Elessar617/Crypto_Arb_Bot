{"created": 1750968642.6985009, "duration": 0.5168402194976807, "exitcode": 1, "root": "/home/gman/workspace/Crypto-Bots/Active/Single-File/v6", "environment": {}, "summary": {"passed": 6, "failed": 2, "total": 8, "collected": 8}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_trade_manager.py", "type": "Module"}]}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager", "outcome": "passed", "result": [{"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_filled_buy_order_checks_existing_sell_orders", "type": "TestCaseFunction", "lineno": 222}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_filled_buy_order_places_new_sell_orders", "type": "TestCaseFunction", "lineno": 178}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_new_buy_order_does_not_place_order_on_no_signal", "type": "TestCaseFunction", "lineno": 115}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_new_buy_order_places_order_on_signal", "type": "TestCaseFunction", "lineno": 69}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_open_buy_order_is_filled", "type": "TestCaseFunction", "lineno": 131}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_open_buy_order_is_still_open", "type": "TestCaseFunction", "lineno": 162}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_process_cycle_handles_no_config", "type": "TestCaseFunction", "lineno": 56}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_process_cycle_handles_no_product_details", "type": "TestCaseFunction", "lineno": 61}]}, {"nodeid": "tests/test_trade_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/test_trade_manager.py::TestTradeManager", "type": "UnitTestCase"}]}], "tests": [{"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_filled_buy_order_checks_existing_sell_orders", "lineno": 222, "outcome": "passed", "keywords": ["test_handle_filled_buy_order_checks_existing_sell_orders", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 0.00035594899964053184, "outcome": "passed"}, "call": {"duration": 0.0011356189934303984, "outcome": "passed"}, "teardown": {"duration": 7.617699156980962e-05, "outcome": "passed"}}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_filled_buy_order_places_new_sell_orders", "lineno": 178, "outcome": "failed", "keywords": ["test_handle_filled_buy_order_places_new_sell_orders", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 0.00011523700959514827, "outcome": "passed"}, "call": {"duration": 0.0017429130093660206, "outcome": "failed", "crash": {"path": "/home/gman/workspace/Crypto-Bots/Active/Single-File/v6/tests/test_trade_manager.py", "lineno": 212, "message": "AssertionError: Expected 'add_sell_order_to_filled_trade' to be called once. Called 0 times."}, "traceback": [{"path": "tests/test_trade_manager.py", "lineno": 212, "message": "AssertionError"}], "longrepr": "self = <MagicMock name='mock.add_sell_order_to_filled_trade' id='140222391902064'>\nargs = ()\nkwargs = {'asset_id': 'BTC-USD', 'sell_order_details': {'order_id': 'sell-456', 'price': '102.00', 'size': '1.0', 'status': 'OPEN'}, 'sell_order_id': 'sell-456'}\nmsg = \"Expected 'add_sell_order_to_filled_trade' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'add_sell_order_to_filled_trade' to be called once. Called 0 times.\n\n/usr/lib/python3.12/unittest/mock.py:955: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_trade_manager.TestTradeManager testMethod=test_handle_filled_buy_order_places_new_sell_orders>\n\n    def test_handle_filled_buy_order_places_new_sell_orders(self):\n        \"\"\"Test placing sell orders after a buy order is filled.\"\"\"\n        # Arrange: A filled buy trade exists with no associated sell orders\n        filled_buy = {\n            \"buy_order_id\": \"buy-123\",\n            \"buy_price\": \"100.00\",\n            \"buy_quantity\": \"1.0\",\n            \"associated_sell_orders\": [],\n        }\n        self.mock_persistence.load_trade_state.return_value = {\n            \"filled_buy_trade\": filled_buy\n        }\n        self.mock_config.TRADING_PAIRS[\"BTC-USD\"][\"sell_profit_tiers\"] = [\n            {\"profit_target\": 0.02, \"quantity_percentage\": 1.0}\n        ]\n        self.mock_client.limit_order_sell.return_value = {\n            \"success\": True,\n            \"order_id\": \"sell-456\",\n        }\n        self.mock_order_calculator.determine_sell_orders_params.return_value = [\n            {\"limit_price\": \"102.00\", \"base_size\": \"1.0\"}\n        ]\n    \n        # Act\n        self.trade_manager.process_asset_trade_cycle(\"BTC-USD\")\n    \n        # Assert\n        self.mock_client.limit_order_sell.assert_called_once_with(\n            product_id=\"BTC-USD\",\n            base_size=\"1.0\",\n            limit_price=\"102.00\",\n            client_order_id=unittest.mock.ANY,\n        )\n>       self.mock_persistence.add_sell_order_to_filled_trade.assert_called_once_with(\n            asset_id=\"BTC-USD\",\n            sell_order_id=\"sell-456\",\n            sell_order_details={\n                \"order_id\": \"sell-456\",\n                \"price\": \"102.00\",\n                \"size\": \"1.0\",\n                \"status\": \"OPEN\",\n            },\n        )\nE       AssertionError: Expected 'add_sell_order_to_filled_trade' to be called once. Called 0 times.\n\ntests/test_trade_manager.py:212: AssertionError"}, "teardown": {"duration": 0.00012818000686820596, "outcome": "passed"}}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_new_buy_order_does_not_place_order_on_no_signal", "lineno": 115, "outcome": "passed", "keywords": ["test_handle_new_buy_order_does_not_place_order_on_no_signal", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 0.00011467801232356578, "outcome": "passed"}, "call": {"duration": 0.00198610000370536, "outcome": "passed"}, "teardown": {"duration": 9.244799730367959e-05, "outcome": "passed"}}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_new_buy_order_places_order_on_signal", "lineno": 69, "outcome": "passed", "keywords": ["test_handle_new_buy_order_places_order_on_signal", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 9.365699952468276e-05, "outcome": "passed"}, "call": {"duration": 0.0036993050016462803, "outcome": "passed"}, "teardown": {"duration": 9.075200068764389e-05, "outcome": "passed"}}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_open_buy_order_is_filled", "lineno": 131, "outcome": "passed", "keywords": ["test_handle_open_buy_order_is_filled", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 0.00011029599409084767, "outcome": "passed"}, "call": {"duration": 0.0013054610026301816, "outcome": "passed"}, "teardown": {"duration": 7.125399133656174e-05, "outcome": "passed"}}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_handle_open_buy_order_is_still_open", "lineno": 162, "outcome": "passed", "keywords": ["test_handle_open_buy_order_is_still_open", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 7.878900214564055e-05, "outcome": "passed"}, "call": {"duration": 0.0016712560027372092, "outcome": "passed"}, "teardown": {"duration": 7.105199620127678e-05, "outcome": "passed"}}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_process_cycle_handles_no_config", "lineno": 56, "outcome": "failed", "keywords": ["test_process_cycle_handles_no_config", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 7.806500070728362e-05, "outcome": "passed"}, "call": {"duration": 0.0014048480079509318, "outcome": "failed", "crash": {"path": "/home/gman/workspace/Crypto-Bots/Active/Single-File/v6/tests/test_trade_manager.py", "lineno": 60, "message": "AssertionError: expected call not found.\nExpected: error('[BTC-USD] Configuration not found.')\n  Actual: not called."}, "traceback": [{"path": "tests/test_trade_manager.py", "lineno": 60, "message": "AssertionError"}], "longrepr": "self = <MagicMock name='mock.error' id='140222390786320'>\nargs = ('[BTC-USD] Configuration not found.',), kwargs = {}\nexpected = \"error('[BTC-USD] Configuration not found.')\"\nactual = 'not called.'\nerror_message = \"expected call not found.\\nExpected: error('[BTC-USD] Configuration not found.')\\n  Actual: not called.\"\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n>           raise AssertionError(error_message)\nE           AssertionError: expected call not found.\nE           Expected: error('[BTC-USD] Configuration not found.')\nE             Actual: not called.\n\n/usr/lib/python3.12/unittest/mock.py:935: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_trade_manager.TestTradeManager testMethod=test_process_cycle_handles_no_config>\n\n    def test_process_cycle_handles_no_config(self):\n        \"\"\"Test that the trade cycle exits gracefully if asset config is missing.\"\"\"\n        self.trade_manager.process_asset_trade_cycle(\"BTC-USD\")\n>       self.mock_logger.error.assert_called_with(\"[BTC-USD] Configuration not found.\")\nE       AssertionError: expected call not found.\nE       Expected: error('[BTC-USD] Configuration not found.')\nE         Actual: not called.\n\ntests/test_trade_manager.py:60: AssertionError"}, "teardown": {"duration": 0.00012088299263268709, "outcome": "passed"}}, {"nodeid": "tests/test_trade_manager.py::TestTradeManager::test_process_cycle_handles_no_product_details", "lineno": 61, "outcome": "passed", "keywords": ["test_process_cycle_handles_no_product_details", "TestTradeManager", "test_trade_manager.py", "tests/__init__.py", "v6"], "setup": {"duration": 0.00014565199671778828, "outcome": "passed"}, "call": {"duration": 0.0009348460007458925, "outcome": "passed"}, "teardown": {"duration": 0.00011696000001393259, "outcome": "passed"}}]}